'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _animation_group = require('./animation_group');

var _animation_group2 = _interopRequireDefault(_animation_group);

var _animation_sequence = require('./animation_sequence');

var _animation_sequence2 = _interopRequireDefault(_animation_sequence);

var _animatable = require('./animatable');

var _animatable2 = _interopRequireDefault(_animatable);

var _lodash = require('lodash.assign');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.groupby');

var _lodash4 = _interopRequireDefault(_lodash3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var shortid = require('shortid');

var TimeLine = (function (_Component) {
    _inherits(TimeLine, _Component);

    function TimeLine() {
        _classCallCheck(this, TimeLine);

        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(TimeLine).call(this));

        _this2.state = {
            player: null
        };

        // store elements in their groups
        _this2.nestedGroups = [];

        // store elements in their respective sequences
        _this2.nestedSequences = [];

        // store nested animations
        _this2.singleAnimations = [];

        _this2.effect = null;
        return _this2;
    }

    _createClass(TimeLine, [{
        key: 'boundGetRef',
        value: function boundGetRef(aId, callBack, node) {
            if (callBack) {
                callBack(node);
            }
            var inNestedGroup = this.nestedGroups.filter(function (i) {
                return aId === i.el.props.aId;
            })[0];
            var inNestedSequences = this.nestedSequences.filter(function (i) {
                return aId === i.el.props.aId;
            })[0];
            var inSingleAnimations = this.singleAnimations.filter(function (i) {
                return aId === i.el.props.aId;
            })[0];

            if (inNestedGroup) {
                inNestedGroup.node = node;
            }
            if (inNestedSequences) {
                inNestedSequences.node = node;
            }
            if (inSingleAnimations) {
                inSingleAnimations.node = node;
            }
        }
    }, {
        key: 'getSequenceEffect',
        value: function getSequenceEffect() {}
    }, {
        key: 'getGroupEffect',
        value: function getGroupEffect() {
            var singleKeyframeEffects = this.singleAnimations.map(function (i) {
                return new KeyframeEffect(i.node, i.el.props.keyframes, i.el.props.timing);
            });

            var singleGroup = new GroupEffect(singleKeyframeEffects);

            // group the nested groups to build the effects

            var nestedKeyFrames = this.nestedGroups.map(function (g) {
                return { idx: g.idx, keyframes: new KeyframeEffect(g.node, g.el.props.keyframes, g.el.props.timing) };
            });

            // do the easy set
            var grouped = (0, _lodash4.default)(nestedKeyFrames, 'idx');
            var keys = Object.keys(grouped);
            var groups = keys.map(function (g) {
                return new GroupEffect(grouped[g].map(function (k) {
                    return k.keyframes;
                }));
            });
            console.log(grouped);
            console.log(groups);

            return new GroupEffect([singleGroup].concat(_toConsumableArray(groups)));
        }
    }, {
        key: 'setupAnimation',
        value: function setupAnimation(child) {
            var instance = new child.type();
            if (instance instanceof _animation_sequence2.default) {
                this.effect = this.getSequenceEffect();
            } else {
                this.effect = this.getGroupEffect();
            }
        }
    }, {
        key: 'startAnimation',
        value: function startAnimation() {
            document.timeline.play(this.effect);
        }
    }, {
        key: 'setupRefListeners',
        value: function setupRefListeners(child, parent, prevIdx) {
            var _this3 = this;

            var _this = this;

            function attachGetRef(child) {
                var aId = shortid.generate();
                if (child.props.getRef) {
                    return _react2.default.cloneElement(child, (0, _lodash2.default)({}, child.props, {
                        aId: aId,
                        getRef: _this.boundGetRef.bind(_this, aId, child.props.getRef)
                    }), child.props.children);
                } else {
                    return _react2.default.cloneElement(child, (0, _lodash2.default)({}, child.props, {
                        aId: aId,
                        getRef: _this.boundGetRef.bind(_this, aId, null)
                    }), child.props.children);
                }
            }

            return _react.Children.map(child.props.children, function (c, idx) {
                var instance = new c.type();
                if (instance instanceof _animatable2.default) {
                    var modified = attachGetRef(c);
                    if (parent) {
                        parent(modified);
                    } else {
                        _this3.singleAnimations.push({ idx: idx, el: modified });
                    }
                    return modified;
                }

                if (instance instanceof _animation_sequence2.default) {
                    var _ret = (function () {
                        var uId = prevIdx !== undefined ? prevIdx + '_' + _this3.nestedGroups.length : _this3.nestedGroups.length;
                        return {
                            v: _this3.setupRefListeners(c, function (el) {
                                _this3.nestedSequences.push({ idx: uId, el: el });
                            }, uId)
                        };
                    })();

                    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
                }
                if (instance instanceof _animation_group2.default) {
                    var _ret2 = (function () {
                        var uId = prevIdx !== undefined ? prevIdx + '_' + _this3.nestedGroups.length : _this3.nestedGroups.length;
                        return {
                            v: _this3.setupRefListeners(c, function (el) {
                                _this3.nestedGroups.push({ idx: uId, el: el });
                            }, uId)
                        };
                    })();

                    if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
                }

                return c;
            });
        }
    }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
            var child = _react.Children.only(this.props.children);
            this.mappedChildren = this.setupRefListeners(child);

            this.nestedGroups.forEach(function (g) {
                console.log(g.idx);
                console.log(g.el.props.id);
            });
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var child = _react.Children.only(this.props.children);
            this.animationConfig = this.setupAnimation(child);
            this.startAnimation();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var _props = this.props;
            var getRef = _props.getRef;
            var component = _props.component;
            var player = this.state.player;

            this.element = _react2.default.createElement(component, {
                ref: function ref(node) {
                    _this4.node = node;
                    if (getRef) {
                        getRef(node);
                    }
                    return node;
                }, player: player
            }, this.mappedChildren);

            return _react.Children.only(this.element);
        }
    }]);

    return TimeLine;
})(_react.Component);

TimeLine.defaultProps = {
    component: 'div'
};
TimeLine.propTypes = {
    component: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]),
    children: function children(props, propName, componentName) {
        var prop = props[propName];

        var typeError = !(new prop.type() instanceof _animation_group2.default) && !(new prop.type() instanceof _animation_sequence2.default);

        if (typeError) {
            return new Error('`' + componentName + '` ' + 'should have a single child of type <AnimationGroup/> || <AnimationSequence/>');
        }
    }
};

exports.default = TimeLine;