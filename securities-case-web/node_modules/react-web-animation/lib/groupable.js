'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _animatable = require('./animatable');

var _animatable2 = _interopRequireDefault(_animatable);

var _immutable = require('immutable');

var _lodash = require('lodash.isequal');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint no-unused-vars:0*/

var Groupable = (function (_Component) {
    _inherits(Groupable, _Component);

    function Groupable(type) {
        _classCallCheck(this, Groupable);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Groupable).call(this));

        _this.state = {
            player: null
        };

        _this.type = type || GroupEffect;

        _this.nodes = {};

        _this.group = null;

        return _this;
    }

    _createClass(Groupable, [{
        key: 'startAnimation',
        value: function startAnimation() {
            var player = document.timeline.play(this.group);
            this.setState({ player: player });
        }
    }, {
        key: 'getKeyframeEffectsFromChildren',
        value: function getKeyframeEffectsFromChildren(props) {
            var _this2 = this;

            var children = props.children;

            return _react.Children.map(children, function (c, idx) {
                return new KeyframeEffect(_this2.nodes[idx], c.props.keyframes, c.props.timing);
            });
        }
    }, {
        key: 'buildFrameCache',
        value: function buildFrameCache(props) {
            var children = props.children;

            var cache = {};
            return _react.Children.forEach(children, function (c, idx) {
                cache[idx] = { frames: c.props.keyframes, timing: c.props.timing };
            });
        }
    }, {
        key: 'getGroupFromKeyframes',
        value: function getGroupFromKeyframes(keyframeEffects) {
            // create the group
            return new this.type(keyframeEffects);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var nextKeyframes = this.getKeyframeEffectsFromChildren(nextProps);
            var newFrameCache = new _immutable.Map(this.buildFrameCache(nextProps));

            if (!(0, _immutable.is)(newFrameCache, this.frameCache)) {
                this.keyframeEffects = nextKeyframes;
                this.group = this.getGroupFromKeyframes(nextKeyframes);
                this.startAnimation();
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.frameCache = new _immutable.Map(this.buildFrameCache(this.props));
            this.keyframeEffects = this.getKeyframeEffectsFromChildren(this.props);
            this.group = this.getGroupFromKeyframes(this.keyframeEffects);

            // start the animation
            this.startAnimation();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props = this.props;
            var children = _props.children;
            var component = _props.component;
            var getRef = _props.getRef;
            var player = this.state.player;

            var childElements = _react.Children.map(children, function (c, idx) {
                return _react2.default.cloneElement(c, {
                    ref: function ref(el) {
                        if (el) {
                            _this3.nodes[idx] = el.node;
                            return el.node;
                        }
                    }, player: player
                });
            });

            return _react2.default.createElement(component, {
                ref: function ref(node) {
                    _this3.wrapper = node;
                    if (getRef) {
                        getRef(node);
                    }
                    return node;
                }
            }, childElements);
        }
    }]);

    return Groupable;
})(_react.Component);

Groupable.defaultProps = {
    component: 'div'
};
Groupable.propTypes = {
    getRef: _react.PropTypes.func,
    component: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]),
    children: function children(props, propName, componentName) {
        var prop = props[propName];

        var typeError = prop.some(function (e) {
            var instance = new e.type();
            return !(instance instanceof _animatable2.default);
        });

        if (typeError) {
            return new Error('`' + componentName + '` ' + 'should have children of type <Animatable/>');
        }
    }
};

exports.default = Groupable;